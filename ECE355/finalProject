
#include <stdio.h>
#include "diag/Trace.h"
#include "cmsis/cmsis_device.h"


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"


/* Clock prescaler for TIM2 timer: no prescaling */
#define myTIM2_PRESCALER ((uint16_t)0x0000)
/* Maximum possible setting for overflow */
#define myTIM2_PERIOD ((uint32_t)0xFFFFFFFF)

void myGPIOA_Init(void);
void myGPIOB_Init(void);
void myTIM2_Init(void);
void myEXTI_Init(void);
void myDAC_Init(void);
void myADC_Init(void);
void myLCD_Init(void);
void show_values(int frequency, int resistance);


// Declare/initialize your global variables here...
// NOTE: You'll need at least one global variable
// (say, timerTriggered = 0 or 1) to indicate
// whether TIM2 has started counting or not.

volatile unsigned int timerTriggered = 0;
volatile unsigned int timerTriggered2 = 0;
float frequency = 0.0;
float potResistance = 0.0;
volatile unsigned char mode = 0x00;


int main(int argc, char* argv[])
{

	trace_printf("This is the project...\n");
	trace_printf("System clock: %u Hz\n", SystemCoreClock);

	myGPIOA_Init();		/* Initialize I/O port PA */
	myGPIOB_Init();		/* Initialize I/O port PB */
	myTIM2_Init();		/* Initialize timer TIM2 */
	myEXTI_Init();		/* Initialize EXTI */
	myDAC_Init();		/* Initialize DAC */
	myADC_Init();		/* Initialize ADC */
	myLCD_Init();		/* Initialize LCD */

	while (1)
	{

		// read adc value
		// start conversion
		ADC1->CR |= ADC_CR_ADSTART;
		// wait for conversion to end
		while((ADC1->ISR & ADC_ISR_EOC) != ADC_ISR_EOC);
		// read value
		int adcVal = ADC1->DR;
		// reset the flag
		ADC1->ISR &= ~(ADC_ISR_EOC);

		DAC->DHR12R1 = (unsigned int) adcVal;
		//3.3 => voltage, DACoutput = V x DOR/ 4095
		float dacOutput = 3.3 * (DAC->DOR1) / 4095;
		//trial and error constant => 0.000655
		potResistance = dacOutput / 0.000655;

		//wait function for lcd
		for(int i = 0; i < 10000; i++){}

		show_values((int) frequency, (int) potResistance);
	}

	return 0;
}



void display_lcd(uint16_t input){

	//clear odr (output) register
	GPIOB-> ODR = 0x0000;

	//write input
    GPIOB-> ODR |= input;

    //assert "Enable" (PB[4] = 1)
    GPIOB-> ODR |= GPIO_ODR_4;

    //wait for "Done" to be asserted (PB[7] to = 1) (idr => input)
    while((GPIOB-> IDR & GPIO_ODR_7) == 0);

    //disable "Enable" (PB[4] = 0)
    GPIOB-> ODR  &= ~(GPIO_ODR_4);

    //wait for "Done" to be un set (wait for PB[7] to = 0)
    while((GPIOB-> IDR & GPIO_ODR_7) != 0);
}


void show_values(int frequency, int resistance){
	 
	//isolate frequency value into 4 digits
	int freq[4];
	for(int i = 0; i < 4; i++) {
		freq[i] = frequency % 10;
		frequency = frequency / 10;
	}
	
	//isolate resistance value into 4 digits
	int res[4];
	for(int i = 0; i < 4; i++) {
		res[i] = resistance % 10;
		resistance = resistance / 10;
	}

	// 0x0020 set RS to 1, to display value on LCD
	// 0x3X where X is a digit in ascii

	//Set DDRAM address to the first line on lcd
	display_lcd(0x8000);
	//Display 'R'
	display_lcd(0x5220);
	//Display ':'
	display_lcd(0x3A20);
	//Display frequency digit 1
	display_lcd((((0x30 | res[3]) << 8) | 0x20));
	//Display frequency digit 2
	display_lcd((((0x30 | res[2]) << 8) | 0x20));
	//Display frequency digit 3
	display_lcd((((0x30 | res[1]) << 8) | 0x20));
	//Display frequency digit 4
	display_lcd((((0x30 | res[0]) << 8) | 0x20));
	//Display 'O'
	display_lcd(0x4F20);
	//Display 'H'
	display_lcd(0x4820);

	//Set DDRAM address to the second line on lcd
	display_lcd(0xC000);
	//Display 'F'
	display_lcd(0x4620);
	//Display ':'
	display_lcd(0x3A20);
	//Display resistance digit 1
	display_lcd((((0x30 | freq[3]) << 8) | 0x20));
	//Display resistance digit 2
	display_lcd((((0x30 | freq[2]) << 8) | 0x20));
	//Display resistance digit 3
	display_lcd((((0x30 | freq[1]) << 8) | 0x20));
	//Display resistance digit 4
	display_lcd((((0x30 | freq[0]) << 8) | 0x20));
	//Display 'H'
	display_lcd(0x4820);
	//Display 'Z'
	display_lcd(0x7A20);
}


void myLCD_Init(){

	//lcd configuration instructions (little endian)

	//function set
	display_lcd(0x3800);

	//display on/off
	display_lcd(0x0C00);

	//entry mode
	display_lcd(0x0600);

	//clear display
	display_lcd(0x0100);


}


void myDAC_Init(){

	//clear control reg
	DAC->CR = 0x0;

	//enable clock for DAC
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;

	//enable dac
	DAC->CR |= DAC_CR_EN1;
}

void myADC_Init(){

	//clear control reg
	ADC1->CR = ((uint16_t)0x0);

	//enable clock for ADC
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	//enable channel 5
	ADC1->CHSELR |= ADC_CHSELR_CHSEL5;

	// continuous conversion mode
	ADC1->CFGR1 |= ADC_CFGR1_CONT;

	// calibrate adc
	ADC1->CR |= ADC_CR_ADCAL;
	while(ADC1->CR == ADC_CR_ADCAL);

	//enable adc
	ADC1->CR |= ADC_CR_ADEN;
}

void myGPIOA_Init()
{
	/* Enable clock for GPIOA peripheral */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

	// Relevant register: RCC->AHBENR


	/* Configure PA0 as input */
	// button
	// Relevant register: GPIOA->MODER
	GPIOA->MODER &= ~(GPIO_MODER_MODER0);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR0);

	/* Configure PA1 as input */
	// ne555 timer
	// Relevant register: GPIOA->MODER
	GPIOA->MODER &= ~(GPIO_MODER_MODER1);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR1);

	/* Configure PA2 as input */
	// function generator
	// Relevant register: GPIOA->MODER
	GPIOA->MODER &= ~(GPIO_MODER_MODER2);
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR2);

	/* Configure PA4 as analog */
	// optocoupler
	// Relevant register: GPIOA->MODER
	GPIOA->MODER |= GPIO_MODER_MODER4;
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4);

	/* Configure PA5 as analog */
	// potentiometer
	// Relevant register: GPIOA->MODER
	GPIOA->MODER |= GPIO_MODER_MODER5;
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR5);
}

void myGPIOB_Init(){

	// for lcd

	/* Enable clock for GPIOA peripheral */
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;

    //set pb4 as output
    GPIOB->MODER |= GPIO_MODER_MODER4_0;
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR4);

    //set pb5 as output
    GPIOB->MODER |= GPIO_MODER_MODER5_0;
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR5);

    //set pb6 as output
    GPIOB->MODER |= GPIO_MODER_MODER6_0;
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR6);

    //set pb7 as input
    GPIOB->MODER &= ~(GPIO_MODER_MODER7);
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7);

    //set pb8 as output
    GPIOB->MODER |= GPIO_MODER_MODER8_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR8);

	//set pb9 as output
    GPIOB->MODER |= GPIO_MODER_MODER9_0;
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR9);

    //set pb10 as output
    GPIOB->MODER |= GPIO_MODER_MODER10_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR10);

	//set pb11 as output
    GPIOB->MODER |= GPIO_MODER_MODER11_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR11);

	//set pb12 as output
    GPIOB->MODER |= GPIO_MODER_MODER12_0;
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR12);

    //set pb13 as output
    GPIOB->MODER |= GPIO_MODER_MODER13_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR13);

	//set pb14 as output
    GPIOB->MODER |= GPIO_MODER_MODER14_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR14);

	//set pb15 as output
    GPIOB->MODER |= GPIO_MODER_MODER15_0;
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR15);
}


void myTIM2_Init()
{
	/* Enable clock for TIM2 peripheral */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
	/* Configure TIM2: buffer auto-reload, count up, stop on overflow,
	* enable update events, interrupt on overflow only */
	TIM2->CR1 = ((uint16_t)0x008C);
	/* Set clock prescaler value */
	TIM2->PSC = myTIM2_PRESCALER;
	/* Set auto-reloaded delay */
	TIM2->ARR = myTIM2_PERIOD;
	/* Update timer registers */
	TIM2->EGR = ((uint16_t)0x0001);
	/* Assign TIM2 interrupt priority = 0 in NVIC */
	NVIC_SetPriority(TIM2_IRQn, 0);
	// Same as: NVIC->IP[3] = ((uint32_t)0x00FFFFFF);
	/* Enable TIM2 interrupts in NVIC */
	NVIC_EnableIRQ(TIM2_IRQn);
	// Same as: NVIC->ISER[0] = ((uint32_t)0x00008000);
	/* Enable update interrupt generation */
	TIM2->DIER |= TIM_DIER_UIE;
}


void myEXTI_Init()
{
	/* Map EXTI0 line to PA0 */
	// Relevant register: SYSCFG->EXTICR[0]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
	/* Map EXTI1 line to PA1 */
	// Relevant register: SYSCFG->EXTICR[0]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1;
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA;
	/* Map EXTI2 line to PA2 */
	// Relevant register: SYSCFG->EXTICR[0]
	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2;
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA;
	/* Map EXTI3 line to PA3 */
	// Relevant register: SYSCFG->EXTICR[0]
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI4;
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI4_PA;
	/* Map EXTI4 line to PA4 */
	// Relevant register: SYSCFG->EXTICR[0]
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5;
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA;

	/* EXTI0 line interrupts: set rising-edge trigger */
	// Relevant register: EXTI->RTSR
	EXTI->RTSR |= EXTI_RTSR_TR0;
	EXTI->RTSR |= EXTI_RTSR_TR1;
	EXTI->RTSR |= EXTI_RTSR_TR2;

	/* Unmask interrupts from EXTI0 line */
	// Relevant register: EXTI->IMR
	EXTI->IMR &= ~(EXTI_IMR_MR0);
	EXTI->IMR |= EXTI_IMR_MR0;
	//enable interrupts
	EXTI->IMR &= ~(EXTI_IMR_MR1);
	EXTI->IMR |= EXTI_IMR_MR1;

	EXTI->IMR &= ~(EXTI_IMR_MR2);
	EXTI->IMR |= EXTI_IMR_MR2;

	/* Assign EXTI0 interrupt priority = 0 in NVIC */
	// Relevant register: NVIC->IP[2], or use NVIC_SetPriority
	NVIC_SetPriority(EXTI0_1_IRQn, 0);
	NVIC_SetPriority(EXTI2_3_IRQn, 1);

	/* Enable EXTI2 interrupts in NVIC */
	// Relevant register: NVIC->ISER[0], or use NVIC_EnableIRQ
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_EnableIRQ(EXTI2_3_IRQn);

}


/* This handler is declared in system/src/cmsis/vectors_stm32f0xx.c */
void TIM2_IRQHandler()
{
	/* Check if update interrupt flag is indeed set */
	if ((TIM2->SR & TIM_SR_UIF) != 0)
	{
		trace_printf("\n*** Overflow! ***\n");

		/* Clear update interrupt flag */
		// Relevant register: TIM2->SR
		TIM2->SR &= ~(TIM_SR_UIF);

		/* Restart stopped timer */
		// Relevant register: TIM2->CR1
		TIM2->CR1 |= TIM_CR1_CEN;
	}
}



/* This handler is declared in system/src/cmsis/vectors_stm32f0xx.c */
void EXTI0_1_IRQHandler()
{
	// Declare/initialize your local variables here...
	if((EXTI->PR & EXTI_PR_PR0) !=0){

		mode ^= 0x01;

		//read frequency from function generator
		if(mode == 0){
			//enable interrupts
			NVIC_EnableIRQ(EXTI2_3_IRQn);
		//read freq from adc/dac
		}else{
			//disable interrupts from function generator
			NVIC_DisableIRQ(EXTI2_3_IRQn);
		}

		//clear EXTI interrupt flag for PR0
		EXTI->PR &= ~(EXTI_PR_PR0);
		EXTI->PR = EXTI_PR_PR0;


	//if EXTI interrupt flag is enabled  for PR1
	} else if((EXTI->PR & EXTI_PR_PR1) !=0) {

		//if mode 1 (display frequency from the NE555 Timer)
		if(mode == 1){

			//if first rising edge
			if(timerTriggered2 == 0){
				//	- Clear count register (TIM2->CNT).
				TIM2->CNT = 0x00000000;

				//	- Start timer (TIM2->CR1).
				TIM2->CR1 |= TIM_CR1_CEN;

				timerTriggered2 = 1;

			//    Else (this is the second edge):
			}else{

				//	- Stop timer (TIM2->CR1).
				TIM2->CR1 &= ~(TIM_CR1_CEN);

				//	- Read out count register (TIM2->CNT).
				float period = TIM2->CNT / 48000000.0;
				//	- Calculate signal period and frequency.
				frequency = 1.0 / period;

				timerTriggered2 = 0;
			}
		}

		//clear interrupt flag from EXTI PR1
		EXTI->PR &= ~(EXTI_PR_PR1);
		EXTI->PR = EXTI_PR_PR1;
	}
}


/* This handler is declared in system/src/cmsis/vectors_stm32f0xx.c */
void EXTI2_3_IRQHandler()
{
	/* Check if EXTI2 interrupt pending flag is indeed set */
	if ((EXTI->PR & EXTI_PR_PR2) != 0)
	{

		if(timerTriggered == 0){
			//	- Clear count register (TIM2->CNT).
			TIM2->CNT = 0x00000000;

			//	- Start timer (TIM2->CR1).
			TIM2->CR1 |= TIM_CR1_CEN;

			timerTriggered = 1;

		}else{ //    Else (this is the second edge):
			//	- Stop timer (TIM2->CR1).
			TIM2->CR1 &= ~(TIM_CR1_CEN);

			//	- Read out count register (TIM2->CNT).
			float period = TIM2->CNT / 48000000.0;
			//	- Calculate signal period and frequency.
			frequency = 1.0 / period;

			timerTriggered = 0;
		}

		EXTI->PR &= ~(EXTI_PR_PR2);
		EXTI->PR = EXTI_PR_PR2;
	}else if ((EXTI->PR & EXTI_PR_PR3) != 0) {
		EXTI->PR &= ~(EXTI_PR_PR3);
		EXTI->PR = EXTI_PR_PR3;
	}
}


#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------
